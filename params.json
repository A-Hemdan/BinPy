{"name":"BinPy","tagline":"Virtualizing Electronics","body":"# [BinPy](http://binpy.github.io/)\r\n\r\n[![Build Status](https://travis-ci.org/BinPy/BinPy.png?branch=develop)](https://travis-ci.org/BinPy/BinPy)\r\n\r\n * [About](#about)\r\n * [Installation](#installation)\r\n * [Available Resources](#resources)\r\n * [Documentation](#documentation)\r\n * [Contribute](#contribute)\r\n\r\n\r\n<a id=\"about\"></a>\r\nWhat is BinPy?\r\n---------------\r\nIt is a library which will serve as a base to develop circuit based applications and educational software on top of it. BinPy is a clear representation of fundamentals. Everything has been written from scratch such as gates, logical operations, etc. This package does not depend on any external library other than pure Python. It aims to extend the hardware programming concepts to Python.\r\n\r\nHow to use\r\n----------\r\n\r\nHere's an example of SR latch constructed from a pair of cross-coupled NOR gates\r\n![SR latch | Source: Wikipedia](https://upload.wikimedia.org/wikipedia/commons/c/c6/R-S_mk2.gif)\r\n\r\n```python\r\n\r\nfrom BinPy import *\r\n\r\nNOR1 = Nor('NOR1')  #First NOR gate\r\nNOR2 = Nor('NOR2')  #Second NOR gate\r\n\r\nNOR2.C.connect(NOR1.B)  #Connecting output of second NOR with input of first NOR\r\nNOR1.C.connect(NOR2.A)  #Connecting output of first NOR with input of second NOR\r\n\r\n\r\nNOR1.A.set(1);NOR2.B.set(0) #Set state\r\nprint 'Q: ',NOR2.C.getState(), '\\t','Q\\': ',NOR1.C.getState()\r\n\r\n\r\nNOR1.A.set(0);NOR2.B.set(1) #Reset state\r\nprint 'Q: ',NOR2.C.getState(), '\\t','Q\\': ',NOR1.C.getState()\r\n\r\n\r\nNOR1.A.set(0);NOR2.B.set(0) #Hold state\r\nprint 'Q: ',NOR2.C.getState(), '\\t','Q\\': ',NOR1.C.getState()\r\n\r\n\r\nNOR1.A.set(1);NOR2.B.set(1) #Invalid state\r\nprint 'Q: ',NOR2.C.getState(), '\\t','Q\\': ',NOR1.C.getState()\r\n\r\n\r\n```\r\n<strong>Output</strong>\r\n```python\r\nQ:  True \tQ':  False\r\nQ:  False \tQ':  True\r\nQ:  False \tQ':  True\r\nQ:  False \tQ':  False\t#Invalid State\r\n```\r\n\r\n<strong>Operations, Combinatonal Logic and Algorithms</strong>\r\n\r\n```python\r\nfrom BinPy import *\r\n\r\n#Operations\r\noperator = Operations()\r\noperator.ADD(1011,11)\r\noperator.SUB(1011,11)\r\noperator.COMP('0011',1) #Second argument chooses betweem 1's or 2's Compliment\r\n\r\n\r\n#Combinational Logic\r\nm = MUX(1,1,0,1)\r\nm.selectLines(0,1)\r\nprint \"MUX Out: \", m.output()\r\n\r\nd = DEMUX()\r\nd.selectLines(0,1)\r\nprint \"DEMUX Out: \", d.output()\r\n\r\nd = Decoder(0,1)\r\nprint \"Decoder Out: \", d.output()\r\n\r\ne = Encoder(0,1,0,0)\r\nprint \"Encoder Out: \", e.output()\r\n\r\n#Sequential Circuits\r\na = DFlipFlop(1,0)\r\nprint \"DFlipFlop Out: \", a.output()\r\n\r\n#IC\r\nmyIC = IC_7400()\r\np = {1:1,2:0,4:0,5:0,7:0,10:1,9:1,13:0,12:0,14:1}\r\nmyIC.setIC(p)\r\nprint \"IC_7400 Out: \", myIC.run()\r\n\r\nmyIC1 = IC_7401()\r\np = {2:0,3:1,5:0,6:0,7:0,8:1,9:1,11:0,12:0,14:1}\r\nmyIC1.setIC(p)\r\nprint \"IC_7401 Out: \", myIC1.run()\r\n\r\n#Algorithms \r\n#Includes the Quine-McCluskey algorithm for solving K-Maps\r\nFinalEquation = QM(['A','B'])\r\nprint \"Minimized Boolean Equation : \" , FinalEquation.get_function(qm.solve([0,1,2],[])[1])\r\n```\r\n\r\n<strong>Output</strong><br/>\r\n```python\r\n{'carry': 0, 'sum': [1, 1, 1, 0]}\r\n{'carry': 1, 'difference': [1, 0, 0, 0]}\r\nMUX Out: 1\r\nDEMUX Out: [0, 0, 0, 0]\r\nDecoder Out:  [0, 1, 0, 0]\r\nEncoder Out: [0, 1]\r\nDFlipFlop Out: [1,0]\r\nIC_7400 Out:  {8: 0, 11: 1, 3: 1, 6: 1}\r\nIC_7401 Out:  {1: 1, 10: 0, 4: 1, 13: 1}\r\nMinimized Boolean Equation : ((NOT B) OR (NOT A))\r\n```\r\nBinPy also comes with a console that is a simple  wrapper around the classic python console from which you can directly use the BinPy Resources.\r\n\r\nTo start it, simply issue:\r\n\r\n$ binpy\r\n\r\nif BinPy is installed in your path.\r\n\r\n<a id=\"resources\"></a>\r\nAvailable Resources\r\n-------------------\r\n* All basic logic gates (NOT, OR, NOR, AND, NAND, XOR, XNOR)\r\n* Combinational logics\r\n\t* MUX \r\n\t* DEMUX \r\n    * Decoder\r\n\t* Encoder\r\n\t\r\n* IC-7400 Series\r\n\r\n\t* 7400\r\n\t* 7401\r\n\t* 7402\r\n\t* 7403\r\n\t* 7404\r\n\t* 7405\r\n\t* 7408\r\n\t* 7410\r\n\t* 7411\r\n\t* 7412\r\n\t* 7413\r\n\t* 7415\r\n\t* 7416\r\n\t* 7417\r\n\t* 7418\r\n\t* 7419\r\n\t* 7420\r\n\t* 7421\r\n\t* 7422\r\n\t* 7424\r\n\t* 7425\r\n\t* 7426\r\n\t* 7427\r\n\t* 7428\r\n\t* 7430\r\n\t* 7432\r\n\t* 7433\r\n\t* 7437\r\n\t* 7440\r\n\t* 7451\r\n\t* 7454\r\n\t* 7455\r\n\t* 7458\r\n\t* 7464\r\n\t* 7486\r\n\t* 741G00\r\n\t* 741G02\r\n\t* 741G03\r\n\t* 741G04\r\n\t* 741G05\r\n\t* 741G08\r\n\t* 7431\r\n\t* 7442\r\n\t* 7443\r\n\t* 7444\r\n\t* 7445\r\n\t* 74133\r\n\t* 74260\r\n\r\n* IC-4000 Series\r\n\r\n    * 4000\r\n    * 4001\r\n    * 4002\r\n    * 4011\r\n    * 4012\r\n    * 4023\r\n    * 4025\r\n    * 4068\r\n    * 4069\r\n    * 4070\r\n    * 4071\r\n    * 4072\r\n    * 4073\r\n    * 4075\r\n    * 4077\r\n    * 4078\r\n    * 4081\r\n    * 4082\r\n    \r\n\r\n* Algorithms\r\n\t* Quine-McCluskey Algorithm (To find minimized Boolean Equation)\r\n\t* Moore Machine Optimizer\r\n\r\n<a id=\"documentation\"></a>\r\nDocumentation\r\n-------------\r\nAuto-generated documentation is available for reference at [BinPy docs](http://packages.python.org/BinPy/index.html)\r\n\r\n<a id=\"installation\"></a>\r\nInstallation\r\n------------\r\n\r\n### Linux\r\n\r\nInstall with **pip**\r\n\r\n    sudo apt-get install pip setuptools ipython\r\n    sudo pip install https://github.com/BinPy/BinPy/zipball/master\r\n\r\nInstall using **git**\r\n\r\n    sudo apt-get install git setuptools ipython\r\n    git clone https://github.com/BinPy/BinPy.git\r\n    cd BinPy/\r\n    sudo python setup.py install\r\n\r\n    \r\n\r\nFuture Work\r\n------------\r\n* Introduction of all ICs\r\n* Introduction of problem solving algorithms\r\n* Addition of Microprocessors and Analog Devices\r\n* Graphical representation of the circuit\r\n* ...\r\n\r\n<a id=\"contribute\"></a>\r\n\r\nHow To Contribute\r\n-----------------\r\n\r\n - [Report Bugs and Issues](https://github.com/BinPy/BinPy/issues)\r\n - [Solve Bugs and Issues](https://github.com/BinPy/BinPy/issues?page=1&state=open)\r\n - Write Tutorials, Examples and Documentation\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/mrsud/binpy/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"UA-43949546-1","note":"Don't delete this file! It's used internally to help with page regeneration."}